[{"authors":[""],"categories":null,"content":"","date":1536326515,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536326515,"objectID":"17a7de62e9d9607859c548dd54e6b111","permalink":"https://Huangoida.github.io/zh/publication/my-paper-name/","publishdate":"2018-09-07T21:21:55+08:00","relpermalink":"/zh/publication/my-paper-name/","section":"publication","summary":"","tags":[],"title":"My Paper Name","type":"publication"},{"authors":null,"categories":null,"content":"","date":1536325713,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536325713,"objectID":"928627bc71aaad779ed6e48870dd89fa","permalink":"https://Huangoida.github.io/zh/talk/my-talk-name/","publishdate":"2018-09-07T21:08:33+08:00","relpermalink":"/zh/talk/my-talk-name/","section":"talk","summary":"","tags":[],"title":"My Talk Name","type":"talk"},{"authors":["oida"],"categories":["java"],"content":"\n目录    继承扩展接口    上文我们讲了抽象类，这次的接口和抽象类有许多的相似处，其实可以这么理解抽象类处于类与接口的中间部分，但接口不是类，而是对类的一组需求描述。\n接口的关键字是interface，它是要产生一个完全抽象的类，它允许创建者确定方法名、参数列表和返回类型，但没有任何的实现。 想要创建一个接口，需要用interface来代替class关键字 继续拿Person来进行魔改\npublic interface Person { String getName(); }  我们一行一行的看\npublic interface Person  这一行,我们可以像类一样，在前面加上一个public，如果不加，它也只具有在这个包里面的访问权限。 然后下一行\nString getName();  你可以将方法声明为public，但你也可以不这么做，他们也照样是public的,你也可以包含域，但是域会被自动的设置为public static final.\n 当要实现一个接口时，在接口中被定义的方法必须被定义为是public的，否则，他们将只能得到默认的包访问权限，这样继承过程中，其可访问权限就降低了，这是java编译器所不允许的。\n 既然接口已经产生了，那么我们该如何使用它呢？ 要让一个类遵循某一个接口（或者一组）,那么需要使用implements关键字,这个好像extends一样。\npublic class Student implements Person { String name; Student(String name){ this.name=name; } @Override public String getName() { return name; } public static void main(String[] args) { Student student=new Student(\u0026quot;小明\u0026quot;); System.out.println(student.getName()); } }  public class Student implements Person  这里Student后面使用了implements，这就表示Student遵循Person这个接口. 而getName在这里实现，这便回到了我们熟悉的类了。\njava里面一个类只能继承一个超类，但它可以遵循许多个接口，比如\npublic class Student implements Person,teacher  这样就需要实现两个接口就够了。\n虽然说接口不是类，它不能够用new实例化一个窗口(毕竟抽象类都不行，它还想行啊) 但是它能够声明变量,接口变量必须引用实现了接口的对象\nPerson student=new Student(\u0026quot;小明\u0026quot;);  既然有了抽象类，为什么还要这么复杂的搞出一个接口来。 学过C++就会知道，C++能够多重继承，它一个类可以继承许多许多的类，这的确是很方便，但却会让事情变得很复杂，特别是两个父类都是有同样的函数，那么编译器到底调用哪个函数呢？是吧。java作为C++的简化版，因为C++存在这种问题，所以java只能单继承，一个类只能继承一个，这样就不会难以分辨这个方法是谁的了。而抽象类作为一个类，它的子类自然也只能够继承它，不能够再加了。如果我要多继承怎么办？所以来了这个接口。因为它的超类所有的方法都是没有实现的，这就不会扯皮了。这其实也可以说是java的多重继承。\n继承扩展接口 接口也是可以继承的,这样就很容易的添加新的方法声明，还可以将多个接口组合成一个接口,这里直接拿别人的代码做例子\n//HorrorShow.java interface Monster{ void menace(); } interface DangerousMonster extends Monster{ void destroy(); } interface Lethal{ void kill(); } interface Vampire extends DangerousMonster, Lethal{ void drinkBlood(); } class DragonZilla implements DangerousMonster{ public void menace() { } public void destroy() { } } class VeryBadVampire implements Vampire{ public void menace(){} public void destroy() {} public void kill() {} public void drinkBlood() {} } public class HorrorShow { static void u(Monster b){b.menace();} static void v(DangerousMonster d){ d.menace(); d.destroy(); } static void w(Lethal l){l.kill();} public static void main(String[] args) { DangerousMonster barney =new DragonZilla(); u(barney); v(barney); Vampire vlad=new VeryBadVampire(); u(vlad); v(vlad); w(vlad); } }  这里extends用于单一类，但是可以引用多个基类接口，只需要将接口名一一分开就行。\n这里可能会产生一个问题，如果多继承后，方法啥都相同还好，如果返回类型这些不同，那么就麻烦了，编译器不知道如何是好，干脆直接报错得了。\n不同的接口用相同的名字不建议这样做，这样会给代码带来混乱。\n","date":1536325332,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536325332,"objectID":"0c55483ddecf147385f1e9c501607396","permalink":"https://Huangoida.github.io/zh/post/%E6%8E%A5%E5%8F%A3/","publishdate":"2018-09-07T21:02:12+08:00","relpermalink":"/zh/post/%E6%8E%A5%E5%8F%A3/","section":"post","summary":"\n","tags":["java","接口 "],"title":"接口","type":"post"},{"authors":["oida"],"categories":["java"],"content":"\n目录  抽象类   这里讲面向对象第三个特性：多态 多态的意思就是一个类型在不同情况下的多种形态，也可以说多态是指通过指向父类的指针，来调用在不同子类中实现的方法。 多态就比如说：老师和学生是两个不同的职业，但他们都是人，也就是说张三是个学生，但他也是个人。 依旧拿之前的例子进行介绍\npublic class Person { private String name;//姓名 private int number;//学号 private static int NextNumber=1; Person(String name){ this.name=name; number=NextNumber; NextNumber++; } public int getNumber() { return number; } public String getName() { return name; } }  public class Student extends Person { private int score; Student(String name,int score) { super(name); this.score=score; } @Override public int getNumber() { return super.getNumber()+1; } public int getScore() { return score; } public static void main(String[] args) { //!!!!!!!!!!!! //!!!!!!!!!!! 注意这里 Person student1=new Student(\u0026quot;小明\u0026quot;,100); System.out.println(\u0026quot;小明的名字：\u0026quot;+student1.getName()+\u0026quot; 小明的学号:\u0026quot;+student1.getNumber()); } }  这里本来应该是\nStudent student1=new Student(\u0026quot;小明\u0026quot;,100);  这句话的，但是这里却写的Person student1=new Student(\u0026quot;小明\u0026quot;,100); 咱们再来看看输出结果： \u0026gt;小明的名字：小明 小明的学号:2\n这明明是Person类型，调用的getNumber()应该是Person的getNumber()吧，但这却学号却是2而不是1，这也很奇怪。 这里就是要介绍的多态。 这里为啥Person能引用Student的东西呢？ Student是继承与Person的，所以Student里面是有Person的东西的，但是因为你是Person类型的对象，我们只能够使用Person对象所拥有的东西，对于Student多出来的东西，这是不能够被执行的,不信的话可以把最后一句话改成： System.out.println(\u0026quot;小明的名字：\u0026quot;+student1.getName()+\u0026quot; 小明的学号:\u0026quot;+student1.getNumber()+\u0026quot; 小明的分数:\u0026quot;+student1.getScore()); 这里报错就是因为getScore这个方法并没有在Person类中声明, 而那些原来就有的部分，会首先调用子类的重写的方法而不会调用父类的方法，如果说子类没有重写该方法，那么就会调用父类的方法。\n抽象类 有的时候，我们可以将一些类进一步抽象，把一堆有相同或者相似元素拿出来，放在一个继承层次比较高的超类中，这便是抽象类。 在Student和teacher中，有相似点的是姓名，我们便可以把姓名给拿出来，放到Person类中，我们还可以在Person类中加上个人编号，但如何编号呢？哪我们该怎么办呢？ 这时候就可以使用abstract关键字 public abstract int setNumber这样setNumber这个方法就是一个抽象方法了，这样我们就不用在person类中想出如何写这个方法了。 除了抽象方法外，有一个或多个抽象方法的类必须被声明为一个抽象类\npublic abstract class Person { private String name;//姓名 private int number; Person(String name){ this.name=name; } public String getName() { return name; } public abstract int setNumber(); }  上面就是Person类的代码 这里看到抽象类中还是可以有具体的数据和方法的，但这种还是不推荐的。 抽象方法的具体实现是在子类中实现的 \u0026gt;如果在抽象类中定义的部分抽象方法或者不定义抽象类方法，那么子类必须被定义为抽象类。 如果你把所有的抽象方法给定义了，那么子类就不是抽象类了\n抽象类也是不能够被实例化的，也就是说无法创建抽象类的对象，比如:Person person=new Person(\u0026quot;小明\u0026quot;)这样是不行的,但是可以创建一个子类的对象，或者是Person person=new Student(\u0026quot;小明\u0026quot;),这样就是说可以定义一个抽象类的对象，但它只能够引用非抽象子类的对象，不能够引用自己的对象。\n","date":1536325332,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536325332,"objectID":"cb94fb667bf6455001057add5bd6a360","permalink":"https://Huangoida.github.io/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%A4%9A%E6%80%81/","publishdate":"2018-09-07T21:02:12+08:00","relpermalink":"/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%A4%9A%E6%80%81/","section":"post","summary":"\n","tags":["java","面向对象"],"title":"面向对象--多态","type":"post"},{"authors":["oida"],"categories":["java"],"content":"\n目录  超类和子类  覆盖方法 子类构造器  阻止继承   这里提到面向对象第二个特性：继承 依旧拿之前用的student类举例子，我们这可以说学生类写好了，但如果我们要写个教师类呢？是不是要重新写一个类，尽管里面有许多相同的元素在里面。这样做是可以的，但一个类还好，要是多个类呢？ 人们可以便想出了一些方法来复用代码，这样就不用重复编写了。 \u0026gt;第一种只需在新的类中产生现有类的对象。由于新的类是由现有类的对象所组成，所以这种方法称为组合 \u0026gt;第二种按照现有类的类型来创建新类，无需改变现有类的形式，采用现有类的形式并在其中添加代码，这种形式称为继承\n超类和子类 继承这很容易理解，你会继承你父母的财产，就是这个意思。 java里面爸爸就叫超类（也可以叫父类，基类），儿子就叫子类（也可以叫派生类）。 当创建出来一个类时，它总是在继承的，如果没有明确从其他类中继承，那么这个类会从java的object类继承，所以object类就是所有类的超类。\n比如可以先写个人类作为基类，再通过继承来写出学生类和教师类\npublic class Person {//人类作为基类 private String name;//姓名 private int number;//学号 private static int NextNumber=1; Person(String name){ this.name=name; number=NextNumber; NextNumber++; } public int getNumber() { return number; } public String getName() { return name; } } public class Student extends Person { private int score; Student(String name,int score) { super(name); this.score=score; } public int getScore() { return score; } public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;,100); System.out.println(\u0026quot;小明的名字：\u0026quot;+student1.getName()+ \u0026quot; 小明的学号:\u0026quot;+student1.getNumber()+\u0026quot; 小明的分数:\u0026quot;+student1.getScore()); } }  输出结果： \u0026gt;小明的名字：小明 小明的学号:1 小明的分数:100\n这里便是学生类继承人类，这里在Student后面有个关键词extends extends就是表示继承，这里便是Student类继承Person类 Student类里增加了一个分数的域，以及一个显示该域的方法。 尽管Student类中没有定义getName和getNumber等方法，但Student类生成的对象却可以使用这些方法，这是因为Student类会继承超类Person的这些方法，同时，也从超类中继承name，number这两个域 但相反的是，Person无法使用Student类中的getScore方法，也没有Score这个域。\n覆盖方法 有的时候，超类中的一些方法对于子类是不适用的，这时候便可以用一个新的方法来覆盖超类中的这个方法。 但不能直接修改 如：\npublic class Student extends Person { private int score; Student(String name,int score) { super(name); this.score=score; } public int getNumber() { ; return number+1; } public int getScore() { return score; } public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;,100); System.out.println(\u0026quot;小明的名字：\u0026quot;+student1.getName()+\u0026quot; 小明的学号:\u0026quot;+student1.getNumber()+\u0026quot; 小明的分数:\u0026quot;+student1.getScore()); } }  这里重写了getNumber方法，这是我们想当然应该这么做的，但这样是错的，因为子类不能够直接访问超类的私有域。 那么这该怎么办呢？ 那么我改成调用方法行不，事实上也是不行的，因为超类也有一个getNumber方法，这会导致无限次的调用，造成程序崩溃。 可以使用关键字super来解决问题： super.getNumber() 这就是调用超类的方法，调用Person类中的getNumber方法。 所以，正确的方法便是：\npublic class Student extends Person { private int score; Student(String name,int score) { super(name); this.score=score; } @Override public int getNumber() { return super.getNumber()+1; } public int getScore() { return score; } public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;,100); System.out.println(\u0026quot;小明的名字：\u0026quot;+student1.getName()+\u0026quot; 小明的学号:\u0026quot;+student1.getNumber()+\u0026quot; 小明的分数:\u0026quot;+student1.getScore()); } }  emmmm，这个@Override只是个注解（先理解为注释吧），也就是说可写可不写，但写了的话： 如果你不小心写成了重载而不是重新该方法，编译器会报错。\n子类构造器 在student类中：\nStudent(String name,int score) { super(name); this.score=score; }  Student这个构造器，里面还有个super(name),通过前文我们知道super是调用超类的方法，这里便是调用超类构造器的简写，这就是调用有name这个参数的构造器。因为子类无法访问超类的私有部分，所以可以通过该方法进行调用。同时，使用super调用构造器必须是子类调用器的第一条语句。\n阻止继承 如果说你不想要自己的类被继承，那么可以使用关键词final\npublic final class Student extends Person { ......... }  这样的话，Student就不会被其他的类所继承了。 方法也是如此，如果你不想要别人重写该方法，那么也是加final\npublic final String getName(){}\n","date":1536325332,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536325332,"objectID":"a035fc7e9c185dface5d4bb6f09c4d78","permalink":"https://Huangoida.github.io/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E7%BB%A7%E6%89%BF/","publishdate":"2018-09-07T21:02:12+08:00","relpermalink":"/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E7%BB%A7%E6%89%BF/","section":"post","summary":"\n","tags":["java","面向对象"],"title":"面向对象--继承","type":"post"},{"authors":["oida"],"categories":["java"],"content":"\n目录  封装是什么？ private public protected default   前面提到了面向对象有三个特性：封装、继承、多态 这里便讲封装这个特性\n封装是什么？ 定义一个变量 int i=1，我们可以利用一大堆的办法来对这个变量进行修改，这有时候就会造成一些很不利的影响，一个不经意间就会对这个变量进行操作，从而造成一堆的bug。有时候，一些人还可以利用这些变量来对你的程序进行破坏，这些都是十分麻烦的。 于是就想把一些信息隐藏起来，让别人无法操作，只允许自己操作，这便是封装，将信息隐藏起来，留下一些接口来外人进行操作。 这里举个例子来加深对封装的理解： 你手上的电脑，里面有cpu、内存、gpu、硬盘、主板等部件，如果说把这一大堆的部件全部放在外面，会出多少问题呢？所以，就会用一个壳子把它放在里面，留出一堆的接口来。作为外人，并不需要理解里面是怎么运作的，只需要知道这些接口是如何使用就行了。\nprivate class Student { private String name;//姓名 private int number;//学号 Student(String na,int nu){ name=na; number=nu; } public int getNumber() { return number; } public String getName() { return name; } }  这里依旧拿出上文的例子，这里看到name和number这两个变量之前都是有一个private关键词的，这里就意味着这个权限是私有的，pirvate的意思就是说：除了包含该成员的类之外，其他的类都无权操作该成员。 你们可以试试看这下面这段代码，看看报不报错\npublic class StudentTest{ public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;,1); Student student2=new Student(\u0026quot;小红\u0026quot;,2); System.out.println(\u0026quot;姓名为：\u0026quot;+student1.name+\u0026quot; 学号为：\u0026quot;+student1.number); System.out.println(\u0026quot;姓名为：\u0026quot;+student2.name+\u0026quot; 学号为：\u0026quot;+student2.number); } } class Student { private String name;//姓名 private int number;//学号 Student(String na,int nu){ name=na; number=nu; } public int getNumber() { return number; } public String getName() { return name; } }  想必是会报错的，虽然说Student这个类里面的确是有name和number这两个变量,但前面加上了private关键字，StudentTest这个类就没有对这两个变量的访问权限，只能通过下面两个函数来对这两个变量进行操作。\n你们可以尝试删除一下private这个关键词，其他的地方不动，看看会发生什么情况。\npublic public这个关键字，它的意义就是让这个成员对所有的类都是可以使用的，这个是最宽松的权限了。 如同上面的代码 拥有public这个关键字的两个函数，可以在StudentTest这个类里面进行操作 你可以尝试再创建一个文件，在新文件里写个main函数，将老文件导入新文件里，看看能不能访问这两个函数。\ntips：java源文件文件名，如果该文件里面所有类都没有用public修饰，那么取啥名字都行 但是有一个类用了public修饰，那么这个源文件的文件名必需与public修饰的类的类名相同. 而且public类每个文件只能有一个\nprotected 这个关键字呢，通常和继承一起用的，这就很蛋疼了。这里先写上，等你们学了继承之后再回头看这个关键字吧。\nprotected关键字，它是指可以被同一包中的其他类进行访问，也可以被自己的子类进行访问，但不能被其他包所访问\n你事实上可以这么想：protected就是public的弱化版，他删去了被其他包所访问的这个权限。 如果说你创建了一个新包，并继承另一个包中的类，你本来只能访问的是public成员（在同一个包里不存在这回事），但如果需要一些成员，要给子类而不是新包里所有的类，那么protected就要上场了\ndefault 事实上是没有这个关键字的，但有时候类里面一些成员前面没有任何权限的关键字时，系统就会默认给那个成员加上这个关键字。\n这个权限是只能是这个包里面的类来进行访问，其他包里面的类就不能进行访问。\n这就又是protected的弱化版，继续删去了其他包内子类能够访问的权限。\n权限访问级别顺序：public \u0026gt; protected \u0026gt; default \u0026gt;private\n   权限 public protected default private     当前类 √y √ √ √   同一个包 √ √ √    子类 √ √     其他包 √       tips：大部分情况下，成员变量是用private修饰，一些方法用private修饰，一些方法用public修饰，这都是要按照情况而定的。 如果是想给子类而不想给其他的类，那么用protected修饰。\n","date":1536238932,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536238932,"objectID":"bd8e13c0b52b89ee12ac708bfda04e0f","permalink":"https://Huangoida.github.io/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%B0%81%E8%A3%85/","publishdate":"2018-09-06T21:02:12+08:00","relpermalink":"/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%B0%81%E8%A3%85/","section":"post","summary":"\n","tags":["java","面向对象"],"title":"面向对象--封装","type":"post"},{"authors":["oida"],"categories":["java"],"content":"\n目录  前言 例子 类的创建 该程序解析 构造器  重载 默认初始化 无参数构造器  隐式参数与显式参数 静态方法与静态常量  静态域 静态方法 析构  其他例子   前言 我们编程都是将自然语言抽象成计算机语言，这其中就有很多的抽象方法，比如我们之前用c语言时用的面向过程编程，这就是一种抽象方法，还有函数式编程、面向切面编程等等，这些都是抽象的方法。相同的问题用不同的抽象方法看，就会有不同的解。这篇就将介绍面向对象这种编程思想\n例子 举个例子： 把大象放进冰箱里： 面向过程编程： 1、打开冰箱 2、把大象放进去 3、把冰箱门关上 而面向对象编程则是： 1、抽象出冰箱的属性（容量）和行为（打开冰箱，放大象，关冰箱）==画出个冰箱的图纸 2、制造一个冰箱，放进大象 这一看可能还是一脸懵逼状态，为什么要搞那么复杂？ 如果按照面向过程编程，如果中间要稍微变动一些细节怎么样？会不会引起全部的代码改动呢？比如两个冰箱放两个大象呢，这样就要对整个过程进行改动。 而面向对象编程呢？因为我们已经抽象出来了这个冰箱，就等于我们有了这个冰箱的图纸，不断地制造这个冰箱就行。 人们把这个图纸就叫做类，制造冰箱就是类的实例化也就是对象。\n面向对象有三大特性：封装、继承、多态。这三个特性会在后面一一细讲。\n类的创建 java里面类定义则是\nclass className { field1 field2 ..... method1 method2 ..... } className 是类的名字 field是类的属性 method是类的行为  举个简单的例子\nclass Student { private String name;//姓名 private int number;//学号 Student(String na,int nu){ name=na; number=nu; } public int getNumber() { return number; } public String getName() { return name; } }  这就是一个学生类的创建，里面有学生的属性（姓名和学号），还有获得那些属性的方法，这里面的一些东西会在后面讲，我们先看看这个类的运用\npublic class StudentTest{ public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;,1); Student student2=new Student(\u0026quot;小红\u0026quot;,2); System.out.println(\u0026quot;姓名为：\u0026quot;+student1.getName()+\u0026quot; 学号为：\u0026quot;+student1.getNumber()); System.out.println(\u0026quot;姓名为：\u0026quot;+student2.getName()+\u0026quot; 学号为：\u0026quot;+student2.getNumber()); } } class Student { private String name;//姓名 private int number;//学号 Student(String na,int nu){ name=na; number=nu; } public int getNumber() { return number; } public String getName() { return name; } }  这里我们创建了两个学生对象，一个叫小明，一个叫小红，还给了他们不同的学号\n姓名为：小明 学号为：1 姓名为：小红 学号为：2  这就是他们的输出结果 通过调用getNumber函数和getName函数将信息打印出来了。\n 注意：这程序的文件名为StudentTest.java，因为文件名必须与public类的名字匹配。在一个源文件里，只能有一个public，但可以有无数个非public类\n 该程序解析 这个程序包含了2个实例域\nprivate String name;//姓名 private int number;//学号  private关键字确保只有Student类自身的方法能够访问到这些实例域，其他类的方法无法访问\n1个构造器和两个方法\nStudent(String na,int nu) public int getNumber() public String getName()  这个类所有的方法都被标记public，public关键字意味着所有的类任何方法都可以调用这些方法 （这些之后会细讲）\n构造器 这个程序里面看Student类，会看到一个函数和类有着相同的名字：\nStudent(String na,int nu){ name=na; number=nu; }  这个便是构造器，也称构造函数 当Student类被创建的时候，便会自动调用该函数，以便将实例域初始化成为想要的状态 如 Student student1=new Student(\u0026quot;小明\u0026quot;,1); 创造Student1这个对象时，就会调用构造器，将Student1这个对象的实例域设置为：\nname=\u0026quot;小明\u0026quot; number=1  还有一点要注意，构造器是没有返回值的\n重载 java里面所有的方法都是支持重载的 重载是什么呢？ 比如：\nint test(int i) int test(String j) int test(int i,String j)  这三个函数名字是一样的，但里面的参数不同，这就是重载。编译器会通过不同方法给出的参数类型以及值类型进行匹配来挑选相应的方法。如果编译器找不到匹配的参数，便会报错。 要注意重载是要返回类型相同的，也就是说不能有两个名字相同、参数相同，但返回类型不同的方法\n构造器自然也是支持重载的，可以重载构造器，来应对不同的需求。\n默认初始化 如果构造器没有给实例域赋值，就会自动的赋默认值：数值为0，布尔值为false，对象引用为null\n无参数构造器 Student(){ name=\u0026quot;小明\u0026quot;; number=1; }  这就是Student无参数构造器。如果有该方法，对象无参数创建时，便会调用该方法进行初始化。 如果一个类有至少一个构造器，但没有无参数构造器，则创建对象是如果无参数就是报错。 如果类没有任何构造器，系统会提供一个默认的构造器：\nclassName() { }  也可以在类的定义中，直接将一个值赋给实例域\nclass student() { private String name=\u0026quot;小米\u0026quot;; }  这样也是可以的\n隐式参数与显式参数 public int getNumber() { return number; }  当调用Student1.getNumber()，将会执行以下指令：\npublic int getNumber() { return Student1.number; }  看上去getNumber这个方法并没有任何参数，实际上存在着一个隐藏的参数，这就是隐式参数，是出现在方法名前的Student对象。假如getNumber有参数的方法Student1.getNumber(1),这个1就是显式参数。可以知道，显式参数出现在方法的声明里，隐式参数并没有出现在声明里。那么有没有可能能自己调用隐式函数呢？ 每个方法里关键字this表示隐式参数\npublic int getNumber() { return this.number; }  这个和上面那个方法意思是一样的\nStudent(String name,int number) { name=name; number=number; }  如果我们这么写，系统就不会知道那个是实例域哪个是局部变量了\nStudent(String name,int number) { this.name=name; this.number=number; }  这样改就能知道，左边this调用了该对象，所以左边是对象的实例域，右边是局部变量\n静态方法与静态常量 静态域 public class StudentTest{ public static void main(String[] args) { Student student1=new Student(\u0026quot;小明\u0026quot;); Student student2=new Student(\u0026quot;小红\u0026quot;); System.out.println(\u0026quot;姓名为：\u0026quot;+student1.getName()+\u0026quot; 学号为：\u0026quot;+student1.getNumber()); System.out.println(\u0026quot;姓名为：\u0026quot;+student2.getName()+\u0026quot; 学号为：\u0026quot;+student2.getNumber()); } } class Student { private String name;//姓名 private int number;//学号 private static int NextNumber=1; Student(String name){ this.name=name; number=NextNumber; NextNumber++; } public int getNumber() { return number; } public String getName() { return name; } }  static关键字表示静态，如果将一个属性定义为static，那么这个属性为整个类所共享，上面的程序依旧输出：\n姓名为：小明 学号为：1 姓名为：小红 学号为：2  如果不用static关键字，有些操作要给每个对象进行赋值，这很不方便，比如统一使用一个常量，设置为静态的话，只需要类名字.该常量，但不设置该常量，则需要创建对象，然后通过对象来进行操作。\n静态方法 如果把方法前面放上static，则该方法为静态方法，该方法是可以不需要使用对象进行操作的 可以直接类名字.该方法的方式来运行。 也就是说该方法没有隐式参数，也就是说它无法访问对象的实例域，但它可以访问类的静态域。\n析构 如果你学过C++，C++里面有个析构函数，那个是当对象生成期结束后，对对象进行回收的函数，但java里面没有这个概念，因为其有自动的垃圾回收器，不需要人工回收内存\n其他例子","date":1536152532,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1536152532,"objectID":"4f93b185edb526a178363c0b841402f0","permalink":"https://Huangoida.github.io/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","publishdate":"2018-09-05T21:02:12+08:00","relpermalink":"/zh/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","section":"post","summary":"\n","tags":["java","面向对象"],"title":"面向对象","type":"post"}]