<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Oida Blog</title>
    <link>https://Huangoida.github.io/categories/java/</link>
    <description>Recent content in java on Oida Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 07 Jan 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://Huangoida.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据库第一章</title>
      <link>https://Huangoida.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>数据库 第一章 数据库系统概述 数据库的4个基本概念 数据 定义： 描述事物的符号记录称为数据 数据的含义称为数据的语义，数据与其语义是不可分的 数据库DB</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://Huangoida.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>策略模式 策略模式的定义 它定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户 策略模式的使用场景 针对同一</description>
    </item>
    
    <item>
      <title>装饰者模式</title>
      <link>https://Huangoida.github.io/post/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>装饰者模式 装饰者模式的定义 装饰者模式动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有贪心的替代方案 装饰者模式的结构 Decora</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>https://Huangoida.github.io/post/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>观察者模式 观察者模式的定义 观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 说白了</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://Huangoida.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>设计模式 现在在学习设计模式，故将各个设计模式记下来 策略模式 策略模式 观察者模式 观察者模式 装饰者模式 装饰者模式</description>
    </item>
    
    <item>
      <title>内部类</title>
      <link>https://Huangoida.github.io/post/%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>https://Huangoida.github.io/post/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E6%B3%9B%E5%9E%8B/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集合类</title>
      <link>https://Huangoida.github.io/post/%E9%9B%86%E5%90%88%E7%B1%BB/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E9%9B%86%E5%90%88%E7%B1%BB/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>抽象类</title>
      <link>https://Huangoida.github.io/post/%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Fri, 07 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>接口</title>
      <link>https://Huangoida.github.io/post/%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 07 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向对象--多态</title>
      <link>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%A4%9A%E6%80%81/</link>
      <pubDate>Fri, 07 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%A4%9A%E6%80%81/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向对象--继承</title>
      <link>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 07 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E7%BB%A7%E6%89%BF/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向对象--封装</title>
      <link>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%B0%81%E8%A3%85/</link>
      <pubDate>Thu, 06 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1---%E5%B0%81%E8%A3%85/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 05 Sep 2018 21:02:12 +0800</pubDate>
      
      <guid>https://Huangoida.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>